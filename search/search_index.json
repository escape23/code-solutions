{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Calculator/","title":"Tutorial for beginners","text":""},{"location":"Calculator/#introduction","title":"Introduction","text":"<p>In this tutorial, we will create a simple calculator GUI using the Tkinter library in Python. Tkinter is a popular GUI toolkit for creating desktop applications.</p> <p>The calculator will have the following features: - Display area to show the current input and result - Buttons for numbers (0-9), decimal point, and basic arithmetic operations (+, -, *, /) - Clear (C) button to clear the current input or result - Equal (=) button to calculate and display the result</p> <p>Let's get started!</p>"},{"location":"Calculator/#how-to-make-a-python-calculator","title":"How To Make a Python Calculator","text":""},{"location":"Calculator/#step-one","title":"Step One","text":""},{"location":"Calculator/#choose-a-text-editor","title":"Choose a text editor","text":"<ol> <li>I like to use visual studio code as my text editor. You can download it here. you can also use other text editors, such as PyCharm or others.</li> <li>if you are using visual studio code, you can install the python extension.</li> <li>if you are using other text editors, make sure you have python installed. install.</li> </ol>"},{"location":"Calculator/#step-two","title":"Step Two","text":""},{"location":"Calculator/#create-a-file","title":"Create a file","text":"<ol> <li>Create a new file in the text editor and call it main.py.</li> </ol>"},{"location":"Calculator/#libraries","title":"Libraries","text":"<ol> <li>write the code below in the file: <pre><code>import tkinter as tk\nfrom tkinter import ttk\n</code></pre> tkinter is the standard Python library for building GUIs. It is imported as tk.</li> </ol> <p>ttk is a submodule of tkinter that provides themed widgets like buttons, labels, and entry fields, giving a modern look to the application.</p>"},{"location":"Calculator/#functions","title":"Functions","text":"<ol> <li>Lets define our first function:  <pre><code>    def handle_button_click(clicked_button_text):\n        current_text = result_var.get()\n</code></pre> this function is the core function that handles the logic of the calculator when a button is clicked. for example, if the user clicks the 7 button, the function will return the text 7.</li> </ol> <pre><code>expression = current_text.replace(\"\u00f7\", \"/\").replace(\"x\", \"*\")\nresult = eval(expression)\n</code></pre> <p>This code is used to convert the text to a mathematical expression.</p> <p>The eval function is used to evaluate the mathematical expression.</p> <p><pre><code> if result.is_integer():\n                result = int(result)\n</code></pre> This code checks if the result is an integer. If it is, it is converted to an integer.</p> <pre><code>result_var.set(result)\n        except Exception as e:\n            result_var.set(\"Error\")\n    elif clicked_button_text == \"C\":\n        result_var.set(\"\")\n    elif clicked_button_text == \"%\":\n        try:\n            current_number = float(current_text)\n            result_var.set(current_number / 100)\n        except ValueError:\n            result_var.set(\"Error\")\n</code></pre> <p>This portion of the code is part of the handle_button_click() function, and it handles specific actions for different calculator buttons: the =, C, and % buttons.</p> <pre><code>elif clicked_button_text == \"\u00b1\":\n        try:\n            current_number = float(current_text)\n            result_var.set(-current_number)\n        except ValueError:\n            result_var.set(\"Error\")\n    else:\n        result_var.set(current_text + clicked_button_text)\n</code></pre> <p>This portion of the code is also part of the handle_button_click() function, and it handles the \u00b1 button.</p>"},{"location":"Calculator/#main-window","title":"Main Window","text":"<pre><code>root = tk.Tk()\nroot.title(\"Calculator\")\n\nroot.configure(bg=\"Black\")\n\nresult_var = tk.StringVar()\nresult_entry = ttk.Entry(root, textvariable=result_var, font=(\"Helvetica\", 24), justify=\"right\")\nresult_entry.grid(row=0, column=0, columnspan=4, sticky=\"nsew\")\n</code></pre> <p><code>root = tk.Tk()</code>: Initializes the main application window for the calculator.</p> <p><code>root.title(\"Calculator\")</code>: Sets the window's title to \"Calculator\".</p> <p><code>root.configure(bg=\"Black\")</code>: Sets the background color of the window to black.</p> <p><code>result_var = tk.StringVar()</code>: Creates a string variable to store and update the text displayed in the calculator's result area.</p> <p><code>result_entry = ttk.Entry(root, textvariable=result_var, font=(\"Helvetica\", 24), justify=\"right\")</code>: Creates a text entry field (where results and expressions will be shown) with: Large Helvetica font size (24) for better readability. Right-aligned text, similar to typical calculator displays.</p> <p><code>result_entry.grid(row=0, column=0, columnspan=4, sticky=\"nsew\")</code>: Positions the entry field at the top of the grid, spanning 4 columns and expanding to fit the available space. </p> <p>This section sets up the main window and the display area for the calculator.</p>"},{"location":"Calculator/#buttons","title":"Buttons","text":"<p><pre><code>buttons = [\n    (\"C\", 1, 0), (\"\u00b1\", 1, 1), (\"%\", 1, 2), (\"\u00f7\", 1, 3),\n    (\"7\", 2, 0), (\"8\", 2, 1), (\"9\", 2, 2), (\"x\", 2, 3),\n    (\"4\", 3, 0), (\"5\", 3, 1), (\"6\", 3, 2), (\"-\", 3, 3),\n    (\"1\", 4, 0), (\"2\", 4, 1), (\"3\", 4, 2), (\"+\", 4, 3),\n    (\"0\", 5, 0, 2), (\".\", 5, 2), (\"=\", 5, 3)\n]\n</code></pre> The <code>buttons</code> variable is a list that defines the layout and properties of the calculator buttons. Each group in the list represents a button and contains the following information:</p> <ol> <li>Button text (e.g., \"C\", \"7\", \"+\")</li> <li>Row position in the grid</li> <li>Column position in the grid</li> <li>(Optional) Column span for wider buttons</li> </ol> <p>For example, <code>(\"C\", 1, 0)</code> means: - The button shows \"C\" - It's in row 1 - It's in column 0</p> <p>This list helps us create and position all the buttons in the calculator's layout, making it easy to change the design or add new buttons if needed.</p>"},{"location":"Calculator/#step-3","title":"Step 3","text":""},{"location":"Calculator/#visual-styling","title":"Visual Styling","text":"<pre><code>style = ttk.Style()\n\nstyle.configure(\"TButton\", font=(\"Helvetica\", 16), background=\"Black\", foreground=\"black\", width=10, height=4)\n\nstyle.configure(\"TEntry\", fieldbackground=\"Black\", foreground=\"black\")\n</code></pre> <p>These lines set up the visual style of the calculator:</p> <p><code>style = ttk.Style():</code> Creates a style object to customize the appearance of widgets.</p> <p><code>style.configure(\"TButton\", ...):</code> Configures the style for buttons: Sets the font to Helvetica with size 16 Sets the background and text color to black Sets a default width and height for the buttons</p> <p><code>style.configure(\"TEntry\", ...):</code> Configures the style for the entry field: Sets the background and text color to black</p> <p><pre><code>for button_info in buttons:\n    button_text, row, col = button_info[:3]\n    colspan = button_info[3] if len(button_info) &gt; 3 else 1\n    button = ttk.Button(root, text=button_text, command=lambda text=button_text: handle_button_click(text), style=\"TButton\")\n    button.grid(row=row, column=col, columnspan=colspan, sticky=\"nsew\", ipadx=10, ipady=4, padx=5, pady=5)\n</code></pre> This code creates and positions all the calculator buttons:</p> <p>It loops through each button's information in the buttons list.</p> <p>For each button, it extracts the text, row, and column position.</p> <p>It determines if the button should span multiple columns (for wider buttons like '0').</p> <p>It creates a button widget with the appropriate text and assigns it the click handling function.</p> <p>Finally, it places the button in the calculator's grid layout with specific positioning and spacing.</p> <p><pre><code>for i in range(6):\n    root.grid_rowconfigure(i, weight=1)\nfor i in range(4):\n    root.grid_columnconfigure(i, weight=1)\n</code></pre> The first loop sets up 6 rows in the grid: It gives each row equal importance (weight=1) This ensures that all rows will expand equally if the window is resized.</p> <p>The second loop sets up 4 columns in the grid: It gives each column equal importance (weight=1) This ensures that all columns will expand equally if the window is resized.  </p>"},{"location":"Calculator/#calculator-window-size","title":"Calculator Window Size","text":"<p><pre><code>width = 500\nheight = 700\nroot.geometry(f\"{width}x{height}\")\n\nroot.resizable(False, False)\n</code></pre> <code>width = 500</code>and <code>height = 700</code>:  Defines the initial dimensions of the calculator window in pixels.</p> <p><code>root.geometry(f\"{width}x{height}\")</code>:  Sets the calculator window's size to 500 pixels wide and 700 pixels tall.</p> <p><code>root.resizable(False, False)</code>:  Prevents the user from resizing the window. The first False disables horizontal resizing, the second disables vertical resizing.</p>"},{"location":"Calculator/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p><pre><code>root.bind(\"&lt;Return&gt;\", lambda event: handle_button_click(\"=\"))\nroot.bind(\"&lt;BackSpace&gt;\", lambda event: handle_button_click(\"C\"))\n</code></pre> These lines add keyboard shortcuts to the calculator:</p> <p><code>root.bind(\"&lt;Return&gt;\", lambda event: handle_button_click(\"=\"))</code>: Binds the Enter key to act as if the \"=\" button was clicked. When the user presses Enter, it calculates and displays the result.</p> <p><code>root.bind(\"&lt;BackSpace&gt;\", lambda event: handle_button_click(\"C\"))</code>: Binds the Backspace key to act as if the \"C\" (Clear) button was clicked. When the user presses Backspace, it clears the current input or result.</p>"},{"location":"Calculator/#calculator-comes-to-life","title":"Calculator Comes To Life!","text":"<p><pre><code>root.mainloop()\n</code></pre> This line makes your calculator come to life and stay active until you close the window.</p>"},{"location":"Calculator/#this-is-how-the-code-should-look-like","title":"This is how the code should look like:","text":"<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\ndef handle_button_click(clicked_button_text):\n    current_text = result_var.get()\n\n    if clicked_button_text == \"=\":\n        try:\n\n            expression = current_text.replace(\"\u00f7\", \"/\").replace(\"x\", \"*\")\n            result = eval(expression)\n\n            if result.is_integer():\n                result = int(result)\n\n            result_var.set(result)\n        except Exception as e:\n            result_var.set(\"Error\")\n    elif clicked_button_text == \"C\":\n        result_var.set(\"\")\n    elif clicked_button_text == \"%\":\n        try:\n            current_number = float(current_text)\n            result_var.set(current_number / 100)\n        except ValueError:\n            result_var.set(\"Error\")\n    elif clicked_button_text == \"\u00b1\":\n        try:\n            current_number = float(current_text)\n            result_var.set(-current_number)\n        except ValueError:\n            result_var.set(\"Error\")\n    else:\n        result_var.set(current_text + clicked_button_text)\n\n\nroot = tk.Tk()\nroot.title(\"Calculator\")\n\n\nroot.configure(bg=\"Black\")\n\nresult_var = tk.StringVar()\nresult_entry = ttk.Entry(root, textvariable=result_var, font=(\"Helvetica\", 24), justify=\"right\")\nresult_entry.grid(row=0, column=0, columnspan=4, sticky=\"nsew\")\n\nbuttons = [\n    (\"C\", 1, 0), (\"\u00b1\", 1, 1), (\"%\", 1, 2), (\"\u00f7\", 1, 3),\n    (\"7\", 2, 0), (\"8\", 2, 1), (\"9\", 2, 2), (\"x\", 2, 3),\n    (\"4\", 3, 0), (\"5\", 3, 1), (\"6\", 3, 2), (\"-\", 3, 3),\n    (\"1\", 4, 0), (\"2\", 4, 1), (\"3\", 4, 2), (\"+\", 4, 3),\n    (\"0\", 5, 0, 2), (\".\", 5, 2), (\"=\", 5, 3)\n]\n\n\nstyle = ttk.Style()\n\n\nstyle.configure(\"TButton\", font=(\"Helvetica\", 16), background=\"Black\", foreground=\"black\", width=10, height=4)\n\n\nstyle.configure(\"TEntry\", fieldbackground=\"Black\", foreground=\"black\")\n\nfor button_info in buttons:\n    button_text, row, col = button_info[:3]\n    colspan = button_info[3] if len(button_info) &gt; 3 else 1\n    button = ttk.Button(root, text=button_text, command=lambda text=button_text: handle_button_click(text), style=\"TButton\")\n    button.grid(row=row, column=col, columnspan=colspan, sticky=\"nsew\", ipadx=10, ipady=4, padx=5, pady=5)\n\nfor i in range(6):\n    root.grid_rowconfigure(i, weight=1)\nfor i in range(4):\n    root.grid_columnconfigure(i, weight=1)\n\nwidth = 500\nheight = 700\nroot.geometry(f\"{width}x{height}\")\n\nroot.resizable(False, False)\n\nroot.bind(\"&lt;Return&gt;\", lambda event: handle_button_click(\"=\"))\nroot.bind(\"&lt;BackSpace&gt;\", lambda event: handle_button_click(\"C\"))\n\nroot.mainloop()\n</code></pre>"},{"location":"Get%20started/","title":"Get Started","text":"<p>Follow these steps to install and run the Code Solutions project on your machine.</p>"},{"location":"Get%20started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher: Check your Python version:   <pre><code>python --version\n</code></pre></li> <li>pip: Should be included with Python.</li> </ul>"},{"location":"Get%20started/#step-by-step-setup","title":"Step-by-Step Setup","text":"<ol> <li>Clone the Repository:</li> </ol> <pre><code>git clone https://escape23.github.io/code-solutions/\ncd code-solutions\n</code></pre> <ol> <li>Set Up Virtual Environment:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: `venv\\Scripts\\activate`\n</code></pre> <ol> <li>Install Dependencies:</li> </ol> <pre><code>pip install -r requirements.txt\n</code></pre> <ol> <li>Run the Application:</li> </ol> <pre><code>python app.py\n</code></pre> <ol> <li>Access the App in Your Browser:    Open http://127.0.0.1:5000 in your web browser.</li> </ol>"}]}